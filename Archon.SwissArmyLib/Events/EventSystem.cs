using System;
using System.Collections.Generic;
using Archon.SwissArmyLib.Collections;
using UnityEngine;

namespace Archon.SwissArmyLib.Events
{
    /// <summary>
    /// A simple event system that uses interfaces instead of delegates to avoid the garbage generated by them.
    /// 
    /// This version is for parameterless events. 
    /// See <see cref="EventSystem{T}"/> if you need to send data with the event.
    /// 
    /// Events are differentiated by an integer. You are expected to create constants to define your events.
    /// </summary>
    public class EventSystem
    {
        /// <summary>
        /// The global EventSystem.
        /// Useful for anything that doesn't require its own EventSystem.
        /// </summary>
        public static readonly EventSystem Global = new EventSystem();

        private readonly Dictionary<int, DelayedList<PrioritizedItem<IEventListener>>> _eventListeners = new Dictionary<int, DelayedList<PrioritizedItem<IEventListener>>>();

        /// <summary>
        /// Invokes an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        public void Invoke(int eventId)
        {
            DelayedList<PrioritizedItem<IEventListener>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
            {
                listeners.ProcessPending();

                for (var i = 0; i < listeners.Count; i++)
                {
                    // gotta wrap it up so one guy doesn't spoil it for everyone
                    try
                    {
                        listeners[i].Item.OnEvent(eventId);
                    }
                    catch (Exception e)
                    {
                        Debug.LogError(e.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Adds a listener for an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="listener">The listener to be called.</param>
        /// <param name="priority">The priority of the listener which affects the order which listeners are called in.</param>
        public void AddListener(int eventId, IEventListener listener, int priority = 0)
        {
            DelayedList<PrioritizedItem<IEventListener>> listeners;
            if (!_eventListeners.TryGetValue(eventId, out listeners))
                _eventListeners[eventId] = listeners = new DelayedList<PrioritizedItem<IEventListener>>(new PrioritizedList<IEventListener>());

            listeners.Add(new PrioritizedItem<IEventListener>(listener, priority));
        }

        /// <summary>
        /// Removes a listener for an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="listener">The listener to remove.</param>
        public void RemoveListener(int eventId, IEventListener listener)
        {
            DelayedList<PrioritizedItem<IEventListener>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
            {
                var backingList = listeners.BackingList;
                for (var i = 0; i < backingList.Count; i++)
                {
                    if (backingList[i].Item != listener) continue;

                    listeners.RemoveAt(i);
                    return;
                }
            }
        }

        /// <summary>
        /// Removes the specified listener from all events.
        /// </summary>
        /// <param name="listener">The listener to unsubscribe from all events.</param>
        public void RemoveListener(IEventListener listener)
        {
            foreach (var eventId in _eventListeners.Keys)
                RemoveListener(eventId, listener);
        }

        /// <summary>
        /// Clears all listeners for all events.
        /// </summary>
        public void Clear()
        {
            foreach (var listenerList in _eventListeners.Values)
                listenerList.Clear();
        }

        /// <summary>
        /// Clears all listeners for a single event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        public void Clear(int eventId)
        {
            DelayedList<PrioritizedItem<IEventListener>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
                listeners.Clear();
        }
    }

    /// <summary>
    /// A simple event system that uses interfaces instead of delegates to avoid the garbage generated by them.
    /// 
    /// This version is for events with args. 
    /// See <see cref="EventSystem"/> if you don't need to send data with the event.
    /// 
    /// Events are differentiated by an integer. You are expected to create constants to define your events.
    /// </summary>
    public class EventSystem<T>
    {
        /// <summary>
        /// The global EventSystem.
        /// Useful for anything that doesn't require its own EventSystem.
        /// </summary>
        public static readonly EventSystem<T> Global = new EventSystem<T>();

        private readonly Dictionary<int, DelayedList<PrioritizedItem<IEventListener<T>>>> _eventListeners = new Dictionary<int, DelayedList<PrioritizedItem<IEventListener<T>>>>();

        /// <summary>
        /// Invokes an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="args">The event args.</param>
        public void Invoke(int eventId, T args)
        {
            DelayedList<PrioritizedItem<IEventListener<T>>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
            {
                listeners.ProcessPending();

                for (var i = 0; i < listeners.Count; i++)
                {
                    // gotta wrap it up so one guy doesn't spoil it for everyone
                    try
                    {
                        listeners[i].Item.OnEvent(eventId, args);
                    }
                    catch (Exception e)
                    {
                        Debug.LogError(e.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Adds a listener for an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="listener">The listener to be called.</param>
        /// <param name="priority">The priority of the listener which affects the order which listeners are called in.</param>
        public void AddListener(int eventId, IEventListener<T> listener, int priority = 0)
        {
            DelayedList<PrioritizedItem<IEventListener<T>>> listeners;
            if (!_eventListeners.TryGetValue(eventId, out listeners))
                _eventListeners[eventId] = listeners = new DelayedList<PrioritizedItem<IEventListener<T>>>(new PrioritizedList<IEventListener<T>>());

            listeners.Add(new PrioritizedItem<IEventListener<T>>(listener, priority));
        }

        /// <summary>
        /// Removes a listener for an event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="listener">The listener to remove.</param>
        public void RemoveListener(int eventId, IEventListener<T> listener)
        {
            DelayedList<PrioritizedItem<IEventListener<T>>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
            {
                var backingList = listeners.BackingList;
                for (var i = 0; i < backingList.Count; i++)
                {
                    if (backingList[i].Item != listener) continue;

                    listeners.RemoveAt(i);
                    return;
                }
            }
        }

        /// <summary>
        /// Removes the specified listener from all events.
        /// </summary>
        /// <param name="listener">The listener to unsubscribe from all events.</param>
        public void RemoveListener(IEventListener<T> listener)
        {
            foreach (var eventId in _eventListeners.Keys)
                RemoveListener(eventId, listener);
        }

        /// <summary>
        /// Clears all listeners for all events.
        /// </summary>
        public void Clear()
        {
            foreach (var listenerList in _eventListeners.Values)
                listenerList.Clear();
        }

        /// <summary>
        /// Clears all listeners for a single event.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        public void Clear(int eventId)
        {
            DelayedList<PrioritizedItem<IEventListener<T>>> listeners;
            if (_eventListeners.TryGetValue(eventId, out listeners))
                listeners.Clear();
        }
    }

    /// <summary>
    /// Defines a method to be used for event callbacks.
    /// </summary>
    public interface IEventListener
    {
        /// <summary>
        /// Called when an event is invoked.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        void OnEvent(int eventId);
    }

    /// <summary>
    /// Defines a method to be used for event callbacks with a parameter of type <typeparamref name="TArgs"/>.
    /// </summary>
    /// <typeparam name="TArgs"></typeparam>
    public interface IEventListener<in TArgs>
    {
        /// <summary>
        /// Called when an event is invoked.
        /// </summary>
        /// <param name="eventId">The id of the event.</param>
        /// <param name="args">The args for the event.</param>
        void OnEvent(int eventId, TArgs args);
    }
}
